<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.ioteye.maven</groupId>
	<artifactId>maven</artifactId>
	<version>1.0.0</version>
	<packaging>jar</packaging>

	<name>maven</name>
	<url>http://maven.apache.org</url>

	<!-- 依赖的maven仓库 -->
	<repositories>
		<repository>
			<id>ioteye-nexus</id>
			<url>http://ioteye:8082/repository/maven-public</url>
		</repository>
		<repository>
			<id>ali-maven</id>
			<url>http://maven.aliyun.com/nexus/content/groups/public/</url>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>nexus-releases</id>
			<name>Local Nexus Repository</name>
			<url>http://ioteye:8082/repository/maven-releases</url>
		</repository>
		<snapshotRepository>
			<id>nexus-snapshots</id>
			<name>Local Nexus Repository</name>
			<url>http://ioteye:8082/repository/maven-snapshots</url>
		</snapshotRepository>
	</distributionManagement>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- spring -->
		<spring.version>4.3.6.RELEASE</spring.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>
	</dependencies>

	<build>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resource</directory>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.1</version>
				<executions>
					<execution>
						<!-- maven-shade-plugin 只存在一个goal为shade, 需要将其绑定到 phase为package上 -->
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>com.ioteye.maven.SpringApp</mainClass>
								</transformer>
								<!--
									将spring framework依赖打到一个jar包中，运行时会出现读取XML schema文件出错。
									原因是spring framework的多个jar包中包含相同的文件spring.handlers和spring.schemas,如果生成一个jar包会互相覆盖。
									为了避免互相影响，可以使用AppendingTransformer来对文件内容追加合并。
								-->
								<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.handlers</resource>
								</transformer>
								<transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.schemas</resource>
								</transformer>
							</transformers>

							<!--
								对jar包进行过滤。
								注意：不针对于scope为test的jar包
							-->
							<artifactSet>
								<!-- 排除jar包 -->
								<excludes>
									<!-- 所有排除jar包的范围 -->
									<exclude>junit:junit:*</exclude>
								</excludes>
								<!-- 所有包含的jar包  -->
								<includes>
									<include>org.springframework:spring-core:*</include>
									<include>org.springframework:spring-context:*</include>
								</includes>
							</artifactSet>

							<!--
								jar包内部文件的过滤,解决包重复引起的打包错误。
								注意：不针对于scope为test的jar包
							-->
							<filters>
								<filter>
									<!-- 针对于junit jar包 -->
									<artifact>junit:junit</artifact>
									<!-- 包含的资源 -->
									<includes>
									</includes>
									<!-- 过滤掉的资源 -->
									<excludes>
										<exclude>org/junit/**</exclude>
										<exclude>org/junit/**</exclude>
										<exclude>junit/framework/**</exclude>
									</excludes>
								</filter>
								<filter>
									<!-- 针所有jar包 -->
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*.SF</exclude>
										<exclude>META-INF/*.DSA</exclude>
										<exclude>META-INF/*.RSA</exclude>
									</excludes>
								</filter>
							</filters>
							<!-- 配置original和shaded的输出目录-->
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 指定项目源码以及 编译jdk版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.6.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<!-- 字符集编码 -->
					<encoding>UTF-8</encoding>
					<!-- 编译器使用的初始内存 -->
					<meminitial>128m</meminitial>
					<!-- 编译器使用的最大内存 -->
					<maxmem>512m</maxmem>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
